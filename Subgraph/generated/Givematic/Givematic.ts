// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PaymentSplitterCreated extends ethereum.Event {
  get params(): PaymentSplitterCreated__Params {
    return new PaymentSplitterCreated__Params(this);
  }
}

export class PaymentSplitterCreated__Params {
  _event: PaymentSplitterCreated;

  constructor(event: PaymentSplitterCreated) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get category(): string {
    return this._event.parameters[2].value.toString();
  }

  get payees(): Array<string> {
    return this._event.parameters[3].value.toStringArray();
  }

  get shares(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get tokenAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Givematic extends ethereum.SmartContract {
  static bind(address: Address): Givematic {
    return new Givematic("Givematic", address);
  }

  getPaymentSplitters(): Array<Address> {
    let result = super.call(
      "getPaymentSplitters",
      "getPaymentSplitters():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getPaymentSplitters(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPaymentSplitters",
      "getPaymentSplitters():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  paymentSplitters(param0: BigInt): Address {
    let result = super.call(
      "paymentSplitters",
      "paymentSplitters(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_paymentSplitters(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "paymentSplitters",
      "paymentSplitters(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePaymentSplitterCall extends ethereum.Call {
  get inputs(): CreatePaymentSplitterCall__Inputs {
    return new CreatePaymentSplitterCall__Inputs(this);
  }

  get outputs(): CreatePaymentSplitterCall__Outputs {
    return new CreatePaymentSplitterCall__Outputs(this);
  }
}

export class CreatePaymentSplitterCall__Inputs {
  _call: CreatePaymentSplitterCall;

  constructor(call: CreatePaymentSplitterCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get category(): string {
    return this._call.inputValues[1].value.toString();
  }

  get payees(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreatePaymentSplitterCall__Outputs {
  _call: CreatePaymentSplitterCall;

  constructor(call: CreatePaymentSplitterCall) {
    this._call = call;
  }
}
